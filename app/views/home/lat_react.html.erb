<div class="container">

    <div id="area"></div>

    <script type="text/babel">
      ReactDOM.render(
          <h1>Latihan ReactJS</h1>,
          document.getElementById("area")
      );
    </script>

    <h2>Basic AutoComplete</h2>
    <div id="app"></div>

    <style>
      body {
        /*font-family: Helvetica, sans-serif;*/
      }

      .react-autosuggest__container {
        position: relative;
      }

      .react-autosuggest__input {
        width: 240px;
        height: 30px;
        padding: 10px 20px;
        font-family: Helvetica, sans-serif;
        font-weight: 300;
        font-size: 16px;
        border: 1px solid #aaa;
        border-radius: 4px;
      }

      .react-autosuggest__input:focus {
        outline: none;
      }

      .react-autosuggest__container--open .react-autosuggest__input {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }

      .react-autosuggest__suggestions-container {
        position: absolute;
        top: 51px;
        width: 280px;
        margin: 0;
        padding: 0;
        list-style-type: none;
        border: 1px solid #aaa;
        background-color: #fff;
        font-family: Helvetica, sans-serif;
        font-weight: 300;
        font-size: 16px;
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
        z-index: 2;
      }

      .react-autosuggest__suggestion {
        cursor: pointer;
        padding: 10px 20px;
      }

      .react-autosuggest__suggestion--focused {
        background-color: #ddd;
      }

    </style>

    <h2><u>How to write React Component</u></h2>

    <div id="compo"></div>

    <script type="text/babel">
    //  to create variable and make it new class
      var Hello = React.createClass({

        render: function() {
          return(
              <h3>Hello World!</h3>
          )
        }
      });
    //  to display on browser
      ReactDOM.render(
          < Hello />,
          document.getElementById("compo")
      );

    </script>

    <h2><u>Property or Prop</u></h2>

    <div id="propx"></div>

    <script type="text/babel">
      //  to create variable and make it new class
      var Hello = React.createClass({
        render: function() {
          return(
              <h3>Hello {this.props.name}! </h3>
          )
        }
      });

      //  to display on browser
      ReactDOM.render(
      < Hello name="Dyo" />,
          document.getElementById("propx")
      );
    </script>

    <h2><u>How Create Default Props</u></h2>

    <div id="propx1"></div>

    <script type="text/babel">
      //  to create variable and make it new class
      var Hello = React.createClass({

        //Create Default Props function
        getDefaultProps: function() {
          return {
            name: 'Brandon'
          }
        },

        render: function() {
          return(
              <h3>Hello {this.props.name}! </h3>
          )
        }
      });

      //  to display on browser
      ReactDOM.render(
      < Hello/>,
          document.getElementById("propx1")
      );
    </script>

    <br>

    <pre>
    var Hello = React.createClass({

      //Create Default Props function
      getDefaultProps: function() {
        return {
          name: 'Brandon'
        }
      },

      render: function() {
        return(
            &lt;h3&gt;Hello {this.props.name}! &lt;/h3&gt;
        )
      }
    });

    ReactDOM.render(
    &lt; Hello /&gt;,
      document.getElementById("propx1")
    );
    </pre>
    <br>

    <h2><u>Working with State</u></h2>

    ...

    <h1>REACT GUIDES</h1>

    <h2>Displaying Data</h2>

    <br>

  <div id="example"></div>

  <script type="text/babel">
    var HelloWorld = React.createClass({
      render: function() {
        return(
            <p>
              Hello, <input type="text" placeholder="Your name here" /> !
              It is {this.props.date.toTimeString()}
            </p>
        );
      }
    });

    setInterval(function() {
      ReactDOM.render(
      <HelloWorld date={new Date()} />,
      document.getElementById('example')
      );
    }, 500);
  </script>

  <br>

  <pre>
  &lt;div id="example"&gt;&lt;/div&gt;

  &lt;script type="text/babel"&gt;

    var HelloWorld = React.createClass({
      render: function() {
        return(
        &lt;p&gt;
        Hello, &lt;input type="text" placeholder="Your name here" /&gt;!
        It is {this.props.date.toTimeString()}
        &lt;/p&gt;
        );
      }
    });

    setInterval(function() {
      ReactDOM.render(
      &lt;HelloWorld date={new Date()} /&gt;,
          document.getElementById('example')
      );
    }, 500);

  &lt;/script&gt;
  </pre>

  <br />

  <h2>HTML Tags vs. React Components</h2>

  <p>React can either render HTML tags (strings) or React components (classes). To render an HTML tag, just use lower-case tag names in JSX:</p>

  <div id="contoh"></div>

  <script type="text/babel">

    var myDivElement = <div className="foo" />;
    ReactDOM.render(myDivElement, document.getElementById('contoh'));

  </script>

  To render a React Component, just create a local variable that starts with an upper-case letter:

  var MyComponent = React.createClass({/*...*/});
  var myElement = <MyComponent someProperty={true} />;
  ReactDOM.render(myElement, document.getElementById('example'));

  React's JSX uses the upper vs. lower case convention to distinguish between local component classes and HTML tags.
  <br>
  Next read:
  https://facebook.github.io/react/docs/jsx-spread.html

  <h2>Interactivity and Dynamic UIs</h2>

  <div id="buttonx"></div>

  <script type="text/babel">

    var LikeButton = React.createClass({
      getInitialState: function() {
        return {liked: false};
      },
      handleClick: function(event) {
        this.setState({liked: !this.state.liked});
      },
      render: function() {
        var text = this.state.liked ? 'like' : 'haven\'t liked';
        return (
            <p onClick={this.handleClick}>
              You {text} this. Click to toggle.
            </p>
        );
      }
    });

    ReactDOM.render(
        <LikeButton />,
        document.getElementById('buttonx')
    );

  </script>


  <h2>Multiple Components</h2>

  <div id="avatarx"></div>

  <script type="text/babel">

    var Avatar = React.createClass({
      render: function() {
        return (
            <div>
              <PagePic pagename={this.props.pagename} />
              <PageLink pagename={this.props.pagename} />
            </div>
        );
      }
    });

    var PagePic = React.createClass({
      render: function() {
        return (
            <img src={'https://graph.facebook.com' + this.props.pagenam + '/picture'} />
        );
      }
    });

    var PageLink = React.createClass({
      render: function() {
        return (
            <a href={'https://www.facebook.com/' + this.props.pagename}>
              {this.props.pagename}
            </a>
        );
      }
    });

    ReactDOM.render(
        <Avatar pagename="Engineering" />,
        document.getElementById('avatarx')
    );

  </script>

  <h2>Form and Slug</h2>

  <div id="slug"></div>

  <script type="text/babel">
    var Input = React.createClass({
      getInitialState: function() {
        return {value: 'Hello!'};
      },
      handleChange: function(event) {
        this.setState({value: event.target.value});
      },
      render: function() {
        var value = this.state.value;
        return (
          <div>
            <input type="text" value={value} onChange={this.handleChange} />
            <p>{value.replace(/\W+/g, "-").toLowerCase()}</p>
          </div>
        );
      }
    });

  // ReactDOM.render(<Input />, document.body);
     ReactDOM.render(
         <Input />,
         document.getElementById('slug')
     );

  </script>

  <h2>jQuery</h2>

  <div class="well clearfix">
    <textarea class="form-control"></textarea><br>
    <span>140</span>
    <button class="js-tweet-button btn btn-primary pull-right" disabled>Tweet</button>
    <button class="js-add-photo-button btn btn-success pull-right">Add Photo</button>
  </div>

  <script type="text/javascript" charset="utf-8">
    // Initially disable the button
    // $("button").prop("disabled", true);

    // When the value of the text area changes...

    $("textarea").on("input", function() {
      $("span").text(140 - $(this).val().length);

      // onclick
      $(".js-tweet-button").on("click", function() {
        if (this)
      })
      // If there's at least one character...
      if ($(this).val().length > 0) {
        // Enable the button.
        $(".js-tweet-button").prop("disabled", false);
      } else {
        // Else, disable the button.
        $(".js-tweet-button").prop("disabled", true);
      }
    });
  </script>

<h2>The Tweet Box Using React.js</h2>

<div id="twitbox"></div>

  <script type="text/babel">
    var TweetBox = React.createClass({
      getInitialState: function() {
        return {
          text: ""
        };
      },
      handleChange: function(event) {
        this.setState({text: event.target.value})
      },
      render: function() {
        return(
          <div className="well clearfix">
            <textarea className="form-control" onChange={this.handleChange}></textarea><br/>
            <button className="btn btn-primary pull-right" disabled={this.state.text.length === 0}>Tweet</button>
            <br />
            <span>{140 - this.state.text.length}</span>
          </div>
        );
      }
    });

    ReactDOM.render(
        <TweetBox />,
        document.getElementById("twitbox")
    );

  </script>

  <h2>Latihan</h2>

  <div id="loha"></div>

  <script type="text/babel">
    var TweetBox = React.createClass({
      render: function() {
        return(
          <div>
            <span>Hello</span>
            <span>World!</span>
          </div>
        );
      }
    });
    ReactDOM.render(
    <TweetBox />,
        document.getElementById("loha")
    );
  </script>


  <br><br>
































    <script type="text/babel">

      'use strict';

      function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

      function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

      function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

      var languages = [{
        name: 'C',
        year: 1972
      }, {
        name: 'C#',
        year: 2000
      }, {
        name: 'C++',
        year: 1983
      }, {
        name: 'Clojure',
        year: 2007
      }, {
        name: 'Elm',
        year: 2012
      }, {
        name: 'Go',
        year: 2009
      }, {
        name: 'Haskell',
        year: 1990
      }, {
        name: 'Java',
        year: 1995
      }, {
        name: 'Javascript',
        year: 1995
      }, {
        name: 'Perl',
        year: 1987
      }, {
        name: 'PHP',
        year: 1995
      }, {
        name: 'Python',
        year: 1991
      }, {
        name: 'Ruby',
        year: 1995
      }, {
        name: 'Scala',
        year: 2003
      }];

      // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters
      function escapeRegexCharacters(str) {
        return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      }

      function getSuggestions(value) {
        var escapedValue = escapeRegexCharacters(value.trim());

        if (escapedValue === '') {
          return [];
        }

        var regex = new RegExp('^' + escapedValue, 'i');

        return languages.filter(function (language) {
          return regex.test(language.name);
        });
      }

      function getSuggestionValue(suggestion) {
        return suggestion.name;
      }

      function renderSuggestion(suggestion) {
        return React.createElement(
            'span',
            null,
            ' ',
            suggestion.name,
            ' '
        );
      }

      var App = function (_React$Component) {
        _inherits(App, _React$Component);

        function App() {
          _classCallCheck(this, App);

          var _this = _possibleConstructorReturn(this, _React$Component.call(this));

          _this.state = {
            value: '',
            suggestions: getSuggestions('')
          };

          _this.onChange = _this.onChange.bind(_this);
          _this.onSuggestionsUpdateRequested = _this.onSuggestionsUpdateRequested.bind(_this);
          return _this;
        }

        App.prototype.onChange = function onChange(event, _ref) {
          var newValue = _ref.newValue;
          var method = _ref.method;

          this.setState({
            value: newValue
          });
        };

        App.prototype.onSuggestionsUpdateRequested = function onSuggestionsUpdateRequested(_ref2) {
          var value = _ref2.value;

          this.setState({
            suggestions: getSuggestions(value)
          });
        };

        App.prototype.render = function render() {
          var _state = this.state;
          var value = _state.value;
          var suggestions = _state.suggestions;

          var inputProps = {
            placeholder: "Type 'c'",
            value: value,
            onChange: this.onChange
          };

          return React.createElement(Autosuggest, { suggestions: suggestions,
            onSuggestionsUpdateRequested: this.onSuggestionsUpdateRequested,
            getSuggestionValue: getSuggestionValue,
            renderSuggestion: renderSuggestion,
            inputProps: inputProps
          });
        };

        return App;
      }(React.Component);

      ReactDOM.render(React.createElement(App, null), document.getElementById('app'));

    </script>

</div>